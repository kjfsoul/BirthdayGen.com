=== NEXT.JS CODEBASE EXTRACTION ===
Generated: Wed Sep  3 08:40:30 EDT 2025

=== PACKAGE.JSON ===
{
  "name": "nextjs_tailwind_shadcn_ts",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "nodemon --exec \"npx tsx server.ts\" --watch server.ts --watch src --ext ts,tsx,js,jsx 2>&1 | tee dev.log",
    "build": "next build",
    "start": "NODE_ENV=production tsx server.ts 2>&1 | tee server.log",
    "lint": "next lint",
    "db:push": "prisma db push",
    "db:generate": "prisma generate",
    "db:migrate": "prisma migrate dev",
    "db:reset": "prisma migrate reset",
    "db:seed": "tsx prisma/seed.ts",
    "setup:supabase": "node scripts/supabase-setup.js"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "@hookform/resolvers": "^5.1.1",
    "@mdxeditor/editor": "^3.39.1",
    "@prisma/client": "^6.11.1",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@reactuses/core": "^6.0.5",
    "@tanstack/react-query": "^5.82.0",
    "@tanstack/react-table": "^8.21.3",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "framer-motion": "^12.23.2",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.525.0",
    "next": "15.3.5",
    "next-auth": "^4.24.11",
    "next-intl": "^4.3.4",
    "next-themes": "^0.4.6",
    "prisma": "^6.11.1",
    "react": "^19.0.0",
    "react-day-picker": "^9.8.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.60.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^3.0.3",
    "react-syntax-highlighter": "^15.6.1",
    "recharts": "^2.15.4",
    "sharp": "^0.34.3",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "sonner": "^2.0.6",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.20.3",
    "uuid": "^11.1.0",
    "vaul": "^1.1.2",
    "z-ai-web-dev-sdk": "^0.0.10",
    "zod": "^4.0.2",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.5",
    "nodemon": "^3.1.10",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.5",
    "typescript": "^5"
  }
}

=== END PACKAGE.JSON ===

=== NEXT.CONFIG.TS ===
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  // 禁用 Next.js 热重载，由 nodemon 处理重编译
  reactStrictMode: false,
  webpack: (config, { dev }) => {
    if (dev) {
      // 禁用 webpack 的热模块替换
      config.watchOptions = {
        ignored: ['**/*'], // 忽略所有文件变化
      };
    }
    return config;
  },
  eslint: {
    // 构建时忽略ESLint错误
    ignoreDuringBuilds: true,
  },
};

export default nextConfig;

=== END NEXT.CONFIG.TS ===

=== TAILWIND.CONFIG.TS ===
import type { Config } from "tailwindcss";
import tailwindcssAnimate from "tailwindcss-animate";

const config: Config = {
    darkMode: "class",
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [tailwindcssAnimate],
};
export default config;

=== END TAILWIND.CONFIG.TS ===

=== TSCONFIG.JSON ===
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "noImplicitAny": false,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

=== END TSCONFIG.JSON ===

=== COMPONENTS.JSON ===
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
=== END COMPONENTS.JSON ===

=== PRISMA SCHEMA ===
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Management (maps to Supabase auth.users)
model User {
  id                    String   @id @default(cuid()) @map("id") @db.Uuid
  email                 String   @unique @map("email")
  aud                   String?  @map("aud")
  role                  String?  @map("role")
  first_name            String?  @map("first_name")
  last_name             String?  @map("last_name")
  aura_type             String?  @map("aura_type")
  email_confirmed_at    DateTime? @map("email_confirmed_at") @db.Timestamptz
  aura_quiz_completed   Boolean  @default(false) @map("aura_quiz_completed")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz
  updated_at            DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  profiles              Profile[]
  contacts              Contact[]
  cards                 Card[]
  gift_recommendations  GiftRecommendation[]
  aura_quiz_responses   AuraQuizResponse[]

  @@map("users")
}

// Profile table (extends auth.users)
model Profile {
  id                    String   @id @default(cuid()) @map("id") @db.Uuid
  user_id               String   @unique @map("user_id") @db.Uuid
  first_name            String?  @map("first_name")
  last_name             String?  @map("last_name")
  aura_type             String?  @map("aura_type")
  aura_quiz_completed   Boolean  @default(false) @map("aura_quiz_completed")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz
  updated_at            DateTime @default(now()) @map("updated_at") @db.Timestamptz

  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "profiles_user_id_fkey")

  @@map("profiles")
}

// Contact Management
model Contact {
  id                    Int      @id @default(autoincrement()) @map("id")
  email                 String?  @unique @map("email")
  first_name            String   @map("first_name")
  last_name             String?  @map("last_name")
  phone                 String?  @map("phone")
  birthday_date         String   @map("birthday_date")
  birthday_year         Int?     @map("birthday_year")
  relationship          String?  @map("relationship")
  aura_type             String?  @map("aura_type")
  notes                 String?  @map("notes")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz
  user_id               String?  @map("user_id") @db.Uuid

  user                  User?    @relation(fields: [user_id], references: [id], onDelete: SetNull, map: "contacts_user_id_fkey")
  cards                 Card[]
  gift_recommendations  GiftRecommendation[]

  @@map("contacts")
}

// Card System
model Card {
  id                    Int      @id @default(autoincrement()) @map("id")
  user_id               String?  @map("user_id") @db.Uuid
  contact_id            Int?     @map("contact_id")
  title                 String   @map("title")
  message               String   @map("message")
  template              String   @map("template")
  background_style      String   @map("background_style")
  text_style            String   @map("text_style")
  elements              Json?    @map("elements") @db.JsonB
  status                String   @default("draft") @map("status")
  sent_at               DateTime? @map("sent_at") @db.Timestamptz
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  user                  User?    @relation(fields: [user_id], references: [id], onDelete: SetNull, map: "cards_user_id_fkey")
  contact               Contact? @relation(fields: [contact_id], references: [id], onDelete: SetNull, map: "cards_contact_id_fkey")
  card_designs          CardDesign[]

  @@map("cards")
}

model CardDesign {
  id                    Int      @id @default(autoincrement()) @map("id")
  message_id            Int?     @map("message_id")
  font_family           String   @default("font-serif") @map("font_family")
  font_size             Int      @default(24) @map("font_size")
  text_color            String   @default("#000000") @map("text_color")
  background_color      String   @default("#ffffff") @map("background_color")
  custom_text           String?  @map("custom_text")
  sparkle_effects       Json?    @map("sparkle_effects") @db.JsonB
  custom_image_url      String?  @map("custom_image_url")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  card                  Card?    @relation(fields: [message_id], references: [id], onDelete: SetNull, map: "card_designs_message_id_fkey")

  @@map("card_designs")
}

// Gift Recommendations
model GiftRecommendation {
  id                    Int      @id @default(autoincrement()) @map("id")
  user_id               String?  @map("user_id") @db.Uuid
  contact_id            Int?     @map("contact_id")
  aura_type             String   @map("aura_type")
  recommendations       Json     @map("recommendations") @db.JsonB
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  user                  User?    @relation(fields: [user_id], references: [id], onDelete: SetNull, map: "gift_recommendations_user_id_fkey")
  contact               Contact? @relation(fields: [contact_id], references: [id], onDelete: SetNull, map: "gift_recommendations_contact_id_fkey")

  @@map("gift_recommendations")
}

// Aura Quiz System
model AuraQuizResponse {
  id                    Int      @id @default(autoincrement()) @map("id")
  user_id               String?  @map("user_id") @db.Uuid
  responses             Json     @map("responses") @db.JsonB
  result                String   @map("result")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  user                  User?    @relation(fields: [user_id], references: [id], onDelete: SetNull, map: "aura_quiz_responses_user_id_fkey")

  @@map("aura_quiz_responses")
}

// Message System (for email/SMS delivery)
model Message {
  id                    Int      @id @default(autoincrement()) @map("id")
  uuid                  String   @unique @default(uuid()) @map("uuid") @db.Uuid
  topic                 String   @map("topic")
  recipient_name        String   @map("recipient_name")
  extension             String   @map("extension")
  payload               Json?    @map("payload") @db.JsonB
  recipient_email       String?  @map("recipient_email")
  recipient_phone       String?  @map("recipient_phone")
  event                 String?  @map("event")
  is_private            Boolean  @default(false) @map("private")
  recipient_gender      String?  @map("recipient_gender")
  relationship_role     String   @map("relationship_role")
  personality           String   @map("personality")
  quirks                String?  @map("quirks")
  sender_email          String   @map("sender_email")
  sender_phone          String?  @map("sender_phone")
  delivery_method       String   @map("delivery_method")
  is_premium            Boolean  @default(false) @map("is_premium")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  purchases             Purchase[]

  @@map("messages")
}

model PremiumMessage {
  id                    Int      @id @default(autoincrement()) @map("id")
  purchase_id           Int      @map("purchase_id")
  content               String   @map("content")
  order_index           Int      @map("order_index")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  purchase              Purchase @relation(fields: [purchase_id], references: [id], onDelete: Cascade, map: "premium_messages_purchase_id_fkey")

  @@map("premium_messages")
}

// Purchase/Billing System
model Purchase {
  id                    Int      @id @default(autoincrement()) @map("id")
  email                 String   @map("email")
  original_message_id   Int?     @map("original_message_id")
  stripe_checkout_session_id String? @map("stripe_checkout_session_id")
  status                String   @default("pending") @map("status")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  premium_messages      PremiumMessage[]
  message               Message? @relation(fields: [original_message_id], references: [id], onDelete: SetNull, map: "purchases_original_message_id_fkey")

  @@map("purchases")
}

// Background/Occasion System (for templates and assets)
model BgOccasion {
  id                    BigInt   @id @default(autoincrement()) @map("id")
  slug                  String   @map("slug")
  label                 String   @map("label")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  bg_asset_occasions    BgAssetOccasion[]

  @@map("bg_occasions")
}

model BgAssetOccasion {
  asset_id              BigInt   @map("asset_id")
  occasion_id           BigInt   @map("occasion_id")

  asset                 VaultAsset @relation(fields: [asset_id], references: [id], onDelete: Cascade, map: "bg_asset_occasions_asset_id_fkey")
  occasion              BgOccasion @relation(fields: [occasion_id], references: [id], onDelete: Cascade, map: "bg_asset_occasions_occasion_id_fkey")

  @@id([asset_id, occasion_id])
  @@map("bg_asset_occasions")
}

// Vault/Asset Management
model VaultAsset {
  id                    BigInt   @id @default(autoincrement()) @map("id")
  pexels_id             BigInt?  @map("pexels_id")
  kind                  String   @map("kind")
  pexels_url            String   @map("pexels_url")
  photographer          String?  @map("photographer")
  photographer_url      String?  @map("photographer_url")
  width                 Int?     @map("width")
  height                Int?     @map("height")
  avg_color             String?  @map("avg_color")
  src                   Json?    @map("src") @db.JsonB
  orientation           String?  @map("orientation")
  tags                  String[] @map("tags")
  brand                 String?  @map("brand")
  queries               String[] @map("queries")
  is_public             Boolean  @default(false) @map("is_public")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  bg_asset_occasions    BgAssetOccasion[]
  bg_user_vaults        BgUserVault[]
  vault_collection_items VaultCollectionItem[]

  @@map("vault_assets")
}

model BgUserVault {
  user_id               String   @map("user_id") @db.Uuid
  asset_id              BigInt   @map("asset_id")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  asset                 VaultAsset @relation(fields: [asset_id], references: [id], onDelete: Cascade, map: "bg_user_vault_asset_id_fkey")

  @@id([user_id, asset_id])
  @@map("bg_user_vault")
}

model VaultCollection {
  id                    BigInt   @id @default(autoincrement()) @map("id")
  name                  String   @map("name")
  brand                 String?  @map("brand")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  vault_collection_items VaultCollectionItem[]

  @@map("vault_collections")
}

model VaultCollectionItem {
  collection_id         BigInt   @map("collection_id")
  asset_id              BigInt   @map("asset_id")

  collection            VaultCollection @relation(fields: [collection_id], references: [id], onDelete: Cascade, map: "vault_collection_items_collection_id_fkey")
  asset                 VaultAsset      @relation(fields: [asset_id], references: [id], onDelete: Cascade, map: "vault_collection_items_asset_id_fkey")

  @@id([collection_id, asset_id])
  @@map("vault_collection_items")
}

// Additional models for completeness (based on your database)
model ArtworkGeneration {
  id                    Int      @id @default(autoincrement()) @map("id")
  workflow_id           String   @map("workflow_id")
  concept_id            String   @map("concept_id")
  artwork_url           String   @map("artwork_url")
  design_metadata       Json?    @map("design_metadata")
  technical_specs       Json?    @map("technical_specs")
  created_at            DateTime? @map("created_at")

  @@map("artwork_generations")
}

model BgIngestLog {
  id                    BigInt   @id @default(autoincrement()) @map("id")
  run_id                String   @unique @default(uuid()) @map("run_id") @db.Uuid
  source                String   @map("source")
  pexels_id             BigInt?  @map("pexels_id")
  asset_id              BigInt?  @map("asset_id")
  occasion_slug         String?  @map("occasion_slug")
  template_key          String?  @map("template_key")
  tags                  String[] @map("tags")
  status                String   @map("status")
  message               String?  @map("message")
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("bg_ingest_log")
}

model LegalValidation {
  id                    Int      @id @default(autoincrement()) @map("id")
  workflow_id           String   @map("workflow_id")
  concept_id            String   @map("concept_id")
  compliance_status     String   @map("compliance_status")
  compliance_details    Json?    @map("compliance_details")
  legal_score           Float?   @map("legal_score")
  recommendations       Json?    @map("recommendations")
  created_at            DateTime? @map("created_at")

  @@map("legal_validations")
}

model ProductConcept {
  id                    Int      @id @default(autoincrement()) @map("id")
  workflow_id           String   @map("workflow_id")
  concept_id            String   @map("concept_id")
  title                 String   @map("title")
  description           String   @map("description")
  category              String   @map("category")
  target_audience       String   @map("target_audience")
  estimated_demand      Float?   @map("estimated_demand")
  uniqueness_score      Float?   @map("uniqueness_score")
  production_feasibility Float?   @map("production_feasibility")
  created_at            DateTime? @map("created_at")

  @@map("product_concepts")
}

model ProductPublication {
  id                    Int      @id @default(autoincrement()) @map("id")
  workflow_id           String   @map("workflow_id")
  product_id            String   @map("product_id")
  platform              String   @map("platform")
  product_url           String   @map("product_url")
  status                String   @map("status")
  estimated_revenue     Float?   @map("estimated_revenue")
  publication_metadata  Json?    @map("publication_metadata")
  created_at            DateTime? @map("created_at")

  @@map("product_publications")
}

model TrendAnalysis {
  id                    Int      @id @default(autoincrement()) @map("id")
  workflow_id           String   @map("workflow_id")
  topic                 String   @map("topic")
  category              String   @map("category")
  relevance_score       Float    @map("relevance_score")
  search_volume         Int?     @map("search_volume")
  growth_rate           Float?   @map("growth_rate")
  related_keywords      Json?    @map("related_keywords")
  market_opportunity    String?  @map("market_opportunity")
  competitive_analysis  String?  @map("competitive_analysis")
  source                String   @map("source")
  perplexity_citations  Json?    @map("perplexity_citations")
  api_usage             Json?    @map("api_usage")
  created_at            DateTime? @map("created_at")

  @@map("trend_analyses")
}

model WorkflowExecution {
  id                    Int      @id @default(autoincrement()) @map("id")
  workflow_id           String   @map("workflow_id")
  workflow_name         String   @map("workflow_name")
  execution_status      String   @map("execution_status")
  stage_results         Json?    @map("stage_results")
  execution_time        Float?   @map("execution_time")
  success_rate          Float?   @map("success_rate")
  final_products        Json?    @map("final_products")
  errors                Json?    @map("errors")
  started_at            DateTime? @map("started_at")
  completed_at          DateTime? @map("completed_at")
  created_at            DateTime? @map("created_at")
  updated_at            DateTime? @map("updated_at")

  @@map("workflow_executions")
}
=== END PRISMA SCHEMA ===

=== PRISMA SEED ===
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('🌱 Seeding database...')

  // Create card templates
  const templates = await Promise.all([
    prisma.cardTemplate.create({
      data: {
        name: 'Birthday Blast',
        description: 'Vibrant and explosive birthday celebration',
        category: 'birthday',
        config: JSON.stringify({
          gradient: 'from-pink-500 to-purple-600',
          animation: 'bounce',
          particles: true
        })
      }
    }),
    prisma.cardTemplate.create({
      data: {
        name: 'Elegant Wishes',
        description: 'Sophisticated and classy birthday greeting',
        category: 'birthday',
        config: JSON.stringify({
          gradient: 'from-rose-500 to-pink-600',
          animation: 'fade',
          particles: false
        })
      }
    }),
    prisma.cardTemplate.create({
      data: {
        name: 'Holiday Cheer',
        description: 'Festive holiday celebration card',
        category: 'holiday',
        config: JSON.stringify({
          gradient: 'from-red-500 to-green-600',
          animation: 'sparkle',
          particles: true
        })
      }
    })
  ])

  // Create holidays
  const holidays = await Promise.all([
    prisma.holiday.create({
      data: {
        name: "New Year's Day",
        date: new Date('2000-01-01'), // Year doesn't matter for recurring
        category: 'holiday',
        isRecurring: true
      }
    }),
    prisma.holiday.create({
      data: {
        name: "Valentine's Day",
        date: new Date('2000-02-14'),
        category: 'holiday',
        isRecurring: true
      }
    }),
    prisma.holiday.create({
      data: {
        name: "Mother's Day",
        date: new Date('2000-05-11'), // 2024 date, will be calculated dynamically
        category: 'holiday',
        isRecurring: true
      }
    }),
    prisma.holiday.create({
      data: {
        name: "Father's Day",
        date: new Date('2000-06-16'), // 2024 date, will be calculated dynamically
        category: 'holiday',
        isRecurring: true
      }
    }),
    prisma.holiday.create({
      data: {
        name: "Christmas",
        date: new Date('2000-12-25'),
        category: 'holiday',
        isRecurring: true
      }
    })
  ])

  console.log('✅ Database seeded successfully!')
  console.log(`📝 Created ${templates.length} card templates`)
  console.log(`🎉 Created ${holidays.length} holidays`)
}

main()
  .catch((e) => {
    console.error('❌ Error seeding database:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
=== END PRISMA SEED ===

=== DATABASE LIBRARY ===
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const db =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: ['query'],
  })

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = db
=== END DATABASE LIBRARY ===

=== APP LAYOUT ===
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "@/components/ui/toaster";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Z.ai Code Scaffold - AI-Powered Development",
  description: "Modern Next.js scaffold optimized for AI-powered development with Z.ai. Built with TypeScript, Tailwind CSS, and shadcn/ui.",
  keywords: ["Z.ai", "Next.js", "TypeScript", "Tailwind CSS", "shadcn/ui", "AI development", "React"],
  authors: [{ name: "Z.ai Team" }],
  openGraph: {
    title: "Z.ai Code Scaffold",
    description: "AI-powered development with modern React stack",
    url: "https://chat.z.ai",
    siteName: "Z.ai",
    type: "website",
  },
  twitter: {
    card: "summary_large_image",
    title: "Z.ai Code Scaffold",
    description: "AI-powered development with modern React stack",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-background text-foreground`}
      >
        {children}
        <Toaster />
      </body>
    </html>
  );
}

=== END APP LAYOUT ===

=== HOME PAGE ===
'use client'

import Link from 'next/link'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Navigation } from "@/components/Navigation"
import {
  Sparkles,
  Heart,
  Gift,
  Wand2,
  Bot,
  Users,
  ArrowRight,
  Star,
  Zap,
  Target,
  Shield
} from "lucide-react"

export default function Home() {
  const features = [
    {
      icon: Wand2,
      title: "AI Card Generator",
      description: "Create stunning animated cards for birthdays, weddings, graduations, and all celebrations with our AI-powered designer.",
      href: "/generator",
      color: "from-amber-400 to-orange-500"
    },
    {
      icon: Bot,
      title: "Smart Automation",
      description: "Automate celebrations for personal and corporate use. Never miss an important date again.",
      href: "/automation",
      color: "from-purple-500 to-blue-600"
    },
    {
      icon: Heart,
      title: "Contact Management",
      description: "Organize contacts with preferences, import from Google/Apple, and manage gift recommendations.",
      href: "/automation",
      color: "from-red-500 to-pink-600"
    }
  ]

  const stats = [
    { 
      label: "Active Users", 
      value: "2,847", 
      icon: Users, 
      href: "/automation",
      description: "People creating amazing celebrations"
    },
    { 
      label: "Cards Created", 
      value: "12,459", 
      icon: Heart, 
      href: "/generator",
      description: "Beautiful animated cards generated"
    },
    { 
      label: "Gifts Sent", 
      value: "8,234", 
      icon: Gift, 
      href: "/automation",
      description: "Thoughtful gifts delivered"
    },
    { 
      label: "Success Rate", 
      value: "98.7%", 
      icon: Star, 
      href: "/showcase",
      description: "Celebrations delivered on time"
    }
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-indigo-900">
      <Navigation />

      {/* Hero Section */}
      <section className="pt-20 pb-16 px-4">
        <div className="max-w-7xl mx-auto text-center">
          <Badge className="bg-gradient-to-r from-amber-400 to-orange-500 text-gray-900 mb-6 text-lg px-4 py-2 border-2 border-amber-300">
            <Sparkles className="h-5 w-5 mr-2" />
            AI-Powered Celebration Magic
          </Badge>
          
          <h1 className="text-5xl md:text-7xl font-bold text-white mb-6">
            Create Unforgettable
            <span className="bg-gradient-to-r from-amber-400 via-orange-400 to-pink-400 bg-clip-text text-transparent block">
              Celebration Moments
            </span>
          </h1>
          
          <p className="text-xl text-gray-300 mb-8 max-w-3xl mx-auto">
            Transform ordinary occasions into extraordinary celebrations with AI-powered animated cards, 
            smart automation, and personalized gift recommendations for every milestone.
          </p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/generator">
              <Button size="lg" className="bg-gradient-to-r from-amber-400 to-orange-500 hover:from-amber-500 hover:to-orange-600 text-gray-900 text-lg px-8 py-4 border-2 border-amber-300">
                <Wand2 className="h-5 w-5 mr-2" />
                Create Your First Card
              </Button>
            </Link>
            <Link href="/automation">
              <Button size="lg" variant="outline" className="text-lg px-8 py-4 border-amber-300 text-amber-300 hover:bg-amber-300 hover:text-gray-900">
                <Bot className="h-5 w-5 mr-2" />
                Explore Automation
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-16 px-4 bg-slate-800">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
            {stats.map((stat, index) => (
              <Link key={index} href={stat.href}>
                <Card className="h-full hover:shadow-2xl transition-all duration-300 cursor-pointer group bg-slate-700 border-slate-600 hover:border-amber-400">
                  <CardContent className="pt-6 text-center">
                    <div className="flex justify-center mb-4">
                      <stat.icon className="h-8 w-8 text-amber-400 group-hover:text-amber-300 transition-colors" />
                    </div>
                    <div className="text-3xl font-bold text-white mb-2 group-hover:text-amber-300 transition-colors">{stat.value}</div>
                    <div className="text-gray-300 group-hover:text-white transition-colors">{stat.label}</div>
                    <div className="text-xs text-gray-400 mt-2 group-hover:text-gray-300 transition-colors">
                      {stat.description}
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 px-4 bg-slate-800">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-white mb-4">
              Everything You Need for Perfect Celebrations
            </h2>
            <p className="text-xl text-gray-300 max-w-2xl mx-auto">
              From stunning animated cards to intelligent automation, we've got every celebration covered for both personal and corporate use.
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <Link key={index} href={feature.href}>
                <Card className="h-full hover:shadow-2xl transition-all duration-300 cursor-pointer group bg-slate-700 border-slate-600 hover:border-amber-400">
                  <CardHeader>
                    <div className={`w-16 h-16 rounded-xl bg-gradient-to-r ${feature.color} flex items-center justify-center mb-4 group-hover:scale-110 transition-transform`}>
                      <feature.icon className="h-8 w-8 text-white" />
                    </div>
                    <CardTitle className="text-xl mb-2 text-white group-hover:text-amber-300 transition-colors">{feature.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-300 mb-4 group-hover:text-white transition-colors">{feature.description}</p>
                    <div className="flex items-center text-amber-400 font-medium group-hover:text-amber-300">
                      <span>Get Started</span>
                      <ArrowRight className="h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform" />
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section className="py-20 px-4 bg-slate-800">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-white mb-4">
              How CelebrationGen Works
            </h2>
            <p className="text-xl text-gray-300 max-w-2xl mx-auto">
              Create magical celebration experiences in three simple steps
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-20 h-20 rounded-full bg-amber-400/20 flex items-center justify-center mx-auto mb-6 border-2 border-amber-400">
                <div className="text-2xl font-bold text-amber-400">1</div>
              </div>
              <h3 className="text-xl font-semibold mb-3 text-white">Add Your Contacts</h3>
              <p className="text-gray-300">
                Import friends, family, and colleagues with their important dates and preferences
              </p>
            </div>

            <div className="text-center">
              <div className="w-20 h-20 rounded-full bg-purple-500/20 flex items-center justify-center mx-auto mb-6 border-2 border-purple-500">
                <div className="text-2xl font-bold text-purple-500">2</div>
              </div>
              <h3 className="text-xl font-semibold mb-3 text-white">Create Amazing Cards</h3>
              <p className="text-gray-300">
                Design stunning animated cards for any occasion with our AI-powered generator
              </p>
            </div>

            <div className="text-center">
              <div className="w-20 h-20 rounded-full bg-blue-500/20 flex items-center justify-center mx-auto mb-6 border-2 border-blue-500">
                <div className="text-2xl font-bold text-blue-500">3</div>
              </div>
              <h3 className="text-xl font-semibold mb-3 text-white">Automate & Relax</h3>
              <p className="text-gray-300">
                Set up automation and never worry about missing an important celebration again
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl p-12 text-white">
            <h2 className="text-4xl font-bold mb-4">
              Ready to Create Birthday Magic?
            </h2>
            <p className="text-xl mb-8 opacity-90">
              Join thousands of users who are already creating unforgettable birthday moments
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link href="/generator">
                <Button size="lg" variant="secondary" className="text-lg px-8 py-4">
                  <Wand2 className="h-5 w-5 mr-2" />
                  Start Creating Cards
                </Button>
              </Link>
              <Link href="/auth">
                <Button size="lg" variant="outline" className="text-lg px-8 py-4 border-white text-white hover:bg-white hover:text-purple-600">
                  <Users className="h-5 w-5 mr-2" />
                  Sign Up Free
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center space-x-2 mb-4 md:mb-0">
              <div className="w-8 h-8 bg-gradient-to-r from-pink-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Heart className="h-5 w-5 text-white" />
              </div>
              <span className="text-xl font-bold">BirthdayGen</span>
            </div>
            <div className="text-center md:text-right">
              <p className="text-gray-400">
                Making every birthday unforgettable with AI-powered magic
              </p>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}
=== END HOME PAGE ===

=== GLOBAL STYLES ===
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* 3D Card Animation Styles */
.backface-hidden {
  backface-visibility: hidden;
}

.rotateY-180 {
  transform: rotateY(180deg);
}

@keyframes magical-glow {
  0%, 100% { box-shadow: 0 0 20px rgba(236, 72, 153, 0.5); }
  50% { box-shadow: 0 0 40px rgba(236, 72, 153, 0.8); }
}

.animate-magical-glow {
  animation: magical-glow 2s infinite;
}

/* Custom utility classes for birthday theme */
.bg-birthday-gradient {
  background: linear-gradient(135deg, #ec4899, #a855f7);
}

.bg-birthday-card-gradient {
  background: linear-gradient(135deg, #f43f5e, #ec4899);
}

.bg-birthday-feature-gradient {
  background: linear-gradient(135deg, #f59e0b, #ef4444);
}

.text-birthday-purple {
  color: #a855f7;
}

.text-birthday-pink {
  color: #ec4899;
}

.text-birthday-orange {
  color: #f59e0b;
}

.text-birthday-green {
  color: #10b981;
}

.text-birthday-blue {
  color: #3b82f6;
}

/* Font display class */
.font-display {
  font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
}

=== END GLOBAL STYLES ===

=== CARDS API ===
import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId')
    const contactId = searchParams.get('contactId')

    if (!userId) {
      return NextResponse.json(
        { error: 'User ID is required' },
        { status: 400 }
      )
    }

    const whereClause: any = { user_id: userId }
    if (contactId) {
      whereClause.contact_id = parseInt(contactId)
    }

    const cards = await db.card.findMany({
      where: whereClause,
      include: {
        contact: true,
        card_designs: true
      },
      orderBy: { created_at: 'desc' }
    })

    return NextResponse.json(cards)
  } catch (error) {
    console.error('Error fetching cards:', error)
    return NextResponse.json(
      { error: 'Failed to fetch cards' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const {
      userId,
      contactId,
      title,
      message,
      template,
      backgroundStyle,
      textStyle,
      elements,
      status
    } = body

    if (!userId || !title || !message || !template) {
      return NextResponse.json(
        { error: 'User ID, title, message, and template are required' },
        { status: 400 }
      )
    }

    const card = await db.card.create({
      data: {
        user_id: userId,
        contact_id: contactId ? parseInt(contactId) : null,
        title,
        message,
        template,
        background_style: backgroundStyle || 'default',
        text_style: textStyle || 'default',
        elements: elements || [],
        status: status || 'draft'
      },
      include: {
        contact: true,
        card_designs: true
      }
    })

    return NextResponse.json(card, { status: 201 })
  } catch (error) {
    console.error('Error creating card:', error)
    return NextResponse.json(
      { error: 'Failed to create card' },
      { status: 500 }
    )
  }
}
=== END CARDS API ===

=== CONTACTS API ===
import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId')

    if (!userId) {
      return NextResponse.json(
        { error: 'User ID is required' },
        { status: 400 }
      )
    }

    const contacts = await db.contact.findMany({
      where: { user_id: userId },
      include: {
        cards: {
          orderBy: { created_at: 'desc' }
        },
        gift_recommendations: {
          orderBy: { created_at: 'desc' }
        }
      },
      orderBy: { created_at: 'desc' }
    })

    return NextResponse.json(contacts)
  } catch (error) {
    console.error('Error fetching contacts:', error)
    return NextResponse.json(
      { error: 'Failed to fetch contacts' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const {
      userId,
      firstName,
      lastName,
      email,
      phone,
      birthdayDate,
      birthdayYear,
      relationship,
      notes
    } = body

    if (!userId || !firstName || !birthdayDate) {
      return NextResponse.json(
        { error: 'User ID, first name, and birthday date are required' },
        { status: 400 }
      )
    }

    const contact = await db.contact.create({
      data: {
        user_id: userId,
        first_name: firstName,
        last_name: lastName || null,
        email: email || null,
        phone: phone || null,
        birthday_date: birthdayDate,
        birthday_year: birthdayYear || null,
        relationship: relationship || null,
        notes: notes || null
      },
      include: {
        cards: true,
        gift_recommendations: true
      }
    })

    return NextResponse.json(contact, { status: 201 })
  } catch (error) {
    console.error('Error creating contact:', error)
    return NextResponse.json(
      { error: 'Failed to create contact' },
      { status: 500 }
    )
  }
}
=== END CONTACTS API ===

=== HEALTH API ===
import { NextResponse } from "next/server";

export async function GET() {
  return NextResponse.json({ message: "Good!" });
}
=== END HEALTH API ===

=== ANIMATED CARD COMPONENT ===
'use client'

import { useState, useRef, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import {
  Sparkles,
  Heart,
  Star,
  Gift,
  Wand2,
  Volume2,
  VolumeX,
  RotateCcw,
  Share2
} from "lucide-react"

interface AnimatedCardProps {
  frontImage?: string
  frontMessage?: string
  insideImage?: string
  insideMessage?: string
  recipientName?: string
  senderName?: string
  theme?: 'birthday' | 'holiday' | 'anniversary' | 'custom'
  includeGame?: boolean
}

export function AnimatedCard({
  frontImage = 'https://images.unsplash.com/photo-1464349095431-e9a21285b5f3?w=400',
  frontMessage = 'Happy Birthday!',
  insideImage = 'https://images.unsplash.com/photo-1530103862676-de8c9debad1d?w=400',
  insideMessage = 'Wishing you all the happiness in the world on your special day!',
  recipientName = 'Friend',
  senderName = 'Your Secret Admirer',
  theme = 'birthday',
  includeGame = true
}: AnimatedCardProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [showScratchOff, setShowScratchOff] = useState(false)
  const [scratchRevealed, setScratchRevealed] = useState(false)
  const [soundEnabled, setSoundEnabled] = useState(true)
  const [particles, setParticles] = useState<Array<{id: number, x: number, y: number, delay: number}>>([])
  const cardRef = useRef<HTMLDivElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  // Generate magical particles for animation
  useEffect(() => {
    const generateParticles = () => {
      const newParticles = Array.from({ length: 20 }, (_, i) => ({
        id: i,
        x: Math.random() * 100,
        y: Math.random() * 100,
        delay: Math.random() * 2
      }))
      setParticles(newParticles)
    }
    generateParticles()
  }, [isOpen])

  // Scratch-off canvas logic
  useEffect(() => {
    if (showScratchOff && canvasRef.current) {
      const canvas = canvasRef.current
      const ctx = canvas.getContext('2d')
      if (!ctx) return

      // Set canvas size
      canvas.width = 300
      canvas.height = 150

      // Draw scratch-off overlay
      ctx.fillStyle = '#C0C0C0'
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Add texture
      ctx.fillStyle = '#A0A0A0'
      for (let i = 0; i < 100; i++) {
        ctx.fillRect(
          Math.random() * canvas.width,
          Math.random() * canvas.height,
          2, 2
        )
      }

      // Add "Scratch Here" text
      ctx.fillStyle = '#666'
      ctx.font = 'bold 16px Arial'
      ctx.textAlign = 'center'
      ctx.fillText('🎁 Scratch to reveal your gift! 🎁', canvas.width/2, canvas.height/2)

      let isScratching = false

      const scratch = (e: MouseEvent | TouchEvent) => {
        if (!isScratching) return

        const rect = canvas.getBoundingClientRect()
        const x = ('touches' in e ? e.touches[0].clientX : e.clientX) - rect.left
        const y = ('touches' in e ? e.touches[0].clientY : e.clientY) - rect.top

        ctx.globalCompositeOperation = 'destination-out'
        ctx.beginPath()
        ctx.arc(x, y, 15, 0, 2 * Math.PI)
        ctx.fill()

        // Check if enough has been scratched
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)
        const pixels = imageData.data
        let transparent = 0

        for (let i = 3; i < pixels.length; i += 4) {
          if (pixels[i] === 0) transparent++
        }

        if (transparent > pixels.length / 4 / 3) { // 30% scratched
          setScratchRevealed(true)
          setTimeout(() => setShowScratchOff(false), 1500)
        }
      }

      canvas.addEventListener('mousedown', () => isScratching = true)
      canvas.addEventListener('mouseup', () => isScratching = false)
      canvas.addEventListener('mousemove', scratch)
      canvas.addEventListener('touchstart', () => isScratching = true)
      canvas.addEventListener('touchend', () => isScratching = false)
      canvas.addEventListener('touchmove', scratch)

      return () => {
        canvas.removeEventListener('mousedown', () => isScratching = true)
        canvas.removeEventListener('mouseup', () => isScratching = false)
        canvas.removeEventListener('mousemove', scratch)
        canvas.removeEventListener('touchstart', () => isScratching = true)
        canvas.removeEventListener('touchend', () => isScratching = false)
        canvas.removeEventListener('touchmove', scratch)
      }
    }
  }, [showScratchOff])

  const openCard = () => {
    setIsOpen(true)
    if (soundEnabled) {
      // In a real app, you'd play a magical sound effect here
      console.log('🎵 Playing magical card opening sound')
    }

    setTimeout(() => {
      if (includeGame) {
        setShowScratchOff(true)
      }
    }, 1500)
  }

  const resetCard = () => {
    setIsOpen(false)
    setShowScratchOff(false)
    setScratchRevealed(false)
  }

  const getThemeColors = () => {
    switch (theme) {
      case 'birthday':
        return {
          primary: 'from-pink-500 to-purple-600',
          secondary: 'from-yellow-400 to-orange-500',
          accent: '#ec4899'
        }
      case 'holiday':
        return {
          primary: 'from-red-500 to-green-600',
          secondary: 'from-gold to-yellow-500',
          accent: '#dc2626'
        }
      case 'anniversary':
        return {
          primary: 'from-rose-500 to-pink-600',
          secondary: 'from-red-400 to-pink-500',
          accent: '#f43f5e'
        }
      default:
        return {
          primary: 'from-blue-500 to-purple-600',
          secondary: 'from-cyan-400 to-blue-500',
          accent: '#3b82f6'
        }
    }
  }

  const themeColors = getThemeColors()

  return (
    <div className="relative w-full max-w-lg mx-auto">
      {/* Magical Particles */}
      {isOpen && (
        <div className="absolute inset-0 pointer-events-none overflow-hidden">
          {particles.map((particle) => (
            <div
              key={particle.id}
              className="absolute animate-ping"
              style={{
                left: `${particle.x}%`,
                top: `${particle.y}%`,
                animationDelay: `${particle.delay}s`,
                animationDuration: '2s'
              }}
            >
              <Sparkles className="h-4 w-4 text-yellow-400" />
            </div>
          ))}
        </div>
      )}

      {/* Card Container */}
      <div
        ref={cardRef}
        className={`relative transition-all duration-1000 transform-gpu ${
          isOpen ? 'scale-105' : 'hover:scale-105'
        }`}
        style={{ perspective: '1000px' }}
      >
        {/* Card Front/Back */}
        <div
          className={`relative w-full transition-all duration-1000 transform-gpu ${
            isOpen ? 'rotateY-180' : ''
          }`}
          style={{
            transformStyle: 'preserve-3d',
            aspectRatio: '3/4'
          }}
        >
          {/* Front of Card */}
          <div
            className={`absolute inset-0 backface-hidden rounded-xl shadow-2xl overflow-hidden cursor-pointer ${
              !isOpen ? 'block' : 'hidden'
            }`}
            onClick={openCard}
          >
            <div className={`absolute inset-0 bg-gradient-to-br ${themeColors.primary}`} />
            <div
              className="absolute inset-0 bg-cover bg-center opacity-60"
              style={{ backgroundImage: `url(${frontImage})` }}
            />
            <div className="absolute inset-0 flex flex-col justify-center items-center text-white p-8">
              <div className="text-center space-y-4">
                <h2 className="text-4xl font-display font-bold mb-4 drop-shadow-lg">
                  {frontMessage}
                </h2>
                <div className="flex justify-center space-x-2">
                  <Heart className="h-8 w-8 animate-bounce" />
                  <Star className="h-10 w-10 animate-bounce [animation-delay:0.2s]" />
                  <Gift className="h-8 w-8 animate-bounce [animation-delay:0.4s]" />
                </div>
                <p className="text-lg font-medium opacity-90">Click to open!</p>
              </div>
            </div>
          </div>

          {/* Inside of Card */}
          <div
            className={`absolute inset-0 bg-white rounded-xl shadow-2xl overflow-hidden ${
              isOpen ? 'block' : 'hidden'
            }`}
            style={{ transform: 'rotateY(180deg)' }}
          >
            <div className="h-full flex">
              {/* Left Side - Image */}
              <div className="w-1/2 relative">
                <div
                  className="absolute inset-0 bg-cover bg-center"
                  style={{ backgroundImage: `url(${insideImage})` }}
                />
                <div className={`absolute inset-0 bg-gradient-to-r ${themeColors.secondary} opacity-20`} />
              </div>

              {/* Right Side - Message */}
              <div className="w-1/2 p-6 flex flex-col justify-center relative">
                <div className="space-y-4">
                  <h3 className="text-2xl font-display font-bold text-gray-800">
                    Dear {recipientName},
                  </h3>
                  <p className="text-gray-700 leading-relaxed">
                    {insideMessage}
                  </p>
                  <div className="pt-4">
                    <p className="text-lg font-medium" style={{ color: themeColors.accent }}>
                      With love,<br />
                      {senderName}
                    </p>
                  </div>
                </div>

                {/* Decorative elements */}
                <div className="absolute top-4 right-4">
                  <Sparkles className="h-6 w-6" style={{ color: themeColors.accent }} />
                </div>
                <div className="absolute bottom-4 left-4">
                  <Heart className="h-5 w-5" style={{ color: themeColors.accent }} />
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Scratch-Off Game Overlay */}
        {showScratchOff && (
          <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-xl">
            <Card className="bg-white p-6 m-4">
              <CardContent className="text-center space-y-4">
                <h3 className="text-xl font-bold">Surprise Gift!</h3>
                <div className="relative">
                  <canvas
                    ref={canvasRef}
                    className="border rounded-lg cursor-pointer"
                    style={{ touchAction: 'none' }}
                  />
                  {scratchRevealed && (
                    <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-yellow-400 to-orange-500 rounded-lg">
                      <div className="text-center text-white">
                        <Gift className="h-12 w-12 mx-auto mb-2" />
                        <p className="font-bold">$50 Coffee Gift Card!</p>
                        <p className="text-sm">Check your email for details</p>
                      </div>
                    </div>
                  )}
                </div>
                {scratchRevealed && (
                  <p className="text-sm text-green-600 font-medium">
                    🎉 Congratulations! Your gift has been revealed!
                  </p>
                )}
              </CardContent>
            </Card>
          </div>
        )}
      </div>

      {/* Controls */}
      <div className="mt-6 flex justify-center space-x-3">
        <Button
          onClick={resetCard}
          variant="outline"
          size="sm"
          disabled={!isOpen}
        >
          <RotateCcw className="h-4 w-4 mr-2" />
          Reset
        </Button>

        <Button
          onClick={() => setSoundEnabled(!soundEnabled)}
          variant="outline"
          size="sm"
        >
          {soundEnabled ? (
            <Volume2 className="h-4 w-4 mr-2" />
          ) : (
            <VolumeX className="h-4 w-4 mr-2" />
          )}
          Sound
        </Button>

        <Button
          variant="outline"
          size="sm"
        >
          <Share2 className="h-4 w-4 mr-2" />
          Share
        </Button>
      </div>

      {/* Card Instructions */}
      {!isOpen && (
        <div className="mt-4 text-center">
          <p className="text-sm text-muted-foreground">
            ✨ Click the card to experience the magic ✨
          </p>
        </div>
      )}
    </div>
  )
}
=== END ANIMATED CARD COMPONENT ===

=== NAVIGATION COMPONENT ===
'use client'

import { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import {
  Home,
  Sparkles,
  Bot,
  Wand2,
  User,
  Menu,
  X,
  Gift,
  Heart
} from "lucide-react"

export function Navigation() {
  const [isOpen, setIsOpen] = useState(false)
  const pathname = usePathname()

  const navItems = [
    { href: '/', label: 'Home', icon: Home },
    { href: '/generator', label: 'Card Generator', icon: Wand2 },
    { href: '/automation', label: 'Automation', icon: Bot },
    { href: '/auth', label: 'Sign In', icon: User }
  ]

  const isActive = (href: string) => pathname === href

  return (
    <nav className="bg-white shadow-lg sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <div className="flex items-center">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-pink-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Heart className="h-5 w-5 text-white" />
              </div>
              <span className="text-xl font-bold text-gray-900">BirthdayGen</span>
            </Link>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-8">
            {navItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                className={`flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                  isActive(item.href)
                    ? 'bg-purple-100 text-purple-700'
                    : 'text-gray-700 hover:text-purple-600 hover:bg-purple-50'
                }`}
              >
                <item.icon className="h-4 w-4" />
                <span>{item.label}</span>
              </Link>
            ))}
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(!isOpen)}
            >
              {isOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </Button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isOpen && (
          <div className="md:hidden">
            <div className="px-2 pt-2 pb-3 space-y-1 border-t">
              {navItems.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  className={`flex items-center space-x-2 px-3 py-2 rounded-md text-base font-medium transition-colors ${
                    isActive(item.href)
                      ? 'bg-purple-100 text-purple-700'
                      : 'text-gray-700 hover:text-purple-600 hover:bg-purple-50'
                  }`}
                  onClick={() => setIsOpen(false)}
                >
                  <item.icon className="h-5 w-5" />
                  <span>{item.label}</span>
                </Link>
              ))}
            </div>
          </div>
        )}
      </div>
    </nav>
  )
}
=== END NAVIGATION COMPONENT ===

=== UTILITIES ===
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

=== END UTILITIES ===

=== SOCKET UTILITIES ===
import { Server } from 'socket.io';

export const setupSocket = (io: Server) => {
  io.on('connection', (socket) => {
    console.log('Client connected:', socket.id);
    
    // Handle messages
    socket.on('message', (msg: { text: string; senderId: string }) => {
      // Echo: broadcast message only the client who send the message
      socket.emit('message', {
        text: `Echo: ${msg.text}`,
        senderId: 'system',
        timestamp: new Date().toISOString(),
      });
    });

    // Handle disconnect
    socket.on('disconnect', () => {
      console.log('Client disconnected:', socket.id);
    });

    // Send welcome message
    socket.emit('message', {
      text: 'Welcome to WebSocket Echo Server!',
      senderId: 'system',
      timestamp: new Date().toISOString(),
    });
  });
};
=== END SOCKET UTILITIES ===

=== SERVER FILE ===
// server.ts - Next.js Standalone + Socket.IO
import { setupSocket } from '@/lib/socket';
import { createServer } from 'http';
import { Server } from 'socket.io';
import next from 'next';

const dev = process.env.NODE_ENV !== 'production';
const currentPort = 3000;
const hostname = '0.0.0.0';

// Custom server with Socket.IO integration
async function createCustomServer() {
  try {
    // Create Next.js app
    const nextApp = next({ 
      dev,
      dir: process.cwd(),
      // In production, use the current directory where .next is located
      conf: dev ? undefined : { distDir: './.next' }
    });

    await nextApp.prepare();
    const handle = nextApp.getRequestHandler();

    // Create HTTP server that will handle both Next.js and Socket.IO
    const server = createServer((req, res) => {
      // Skip socket.io requests from Next.js handler
      if (req.url?.startsWith('/api/socketio')) {
        return;
      }
      handle(req, res);
    });

    // Setup Socket.IO
    const io = new Server(server, {
      path: '/api/socketio',
      cors: {
        origin: "*",
        methods: ["GET", "POST"]
      }
    });

    setupSocket(io);

    // Start the server
    server.listen(currentPort, hostname, () => {
      console.log(`> Ready on http://${hostname}:${currentPort}`);
      console.log(`> Socket.IO server running at ws://${hostname}:${currentPort}/api/socketio`);
    });

  } catch (err) {
    console.error('Server startup error:', err);
    process.exit(1);
  }
}

// Start the server
createCustomServer();

=== END SERVER FILE ===

=== SUPABASE SETUP SCRIPT ===
#!/usr/bin/env node

console.log(`
🔧 SUPABASE SETUP GUIDE
=======================

To get your Supabase database connection string:

1. Go to your Supabase project dashboard: https://app.supabase.com
2. Select your project
3. Go to Settings → Database
4. Find the "Connection string" section
5. Copy the "URI" connection string

Your connection string should look like:
postgresql://postgres:[YOUR-PASSWORD]@db.[YOUR-PROJECT-REF].supabase.co:5432/postgres

Replace the placeholder in your .env file with your actual connection string.

After updating your .env file, run:

npm run db:push
npm run db:seed

This will:
1. Push the schema to your Supabase database
2. Seed it with initial data

Then you can run:
npx prisma studio

To view your database in a nice GUI.
`);
=== END SUPABASE SETUP SCRIPT ===

=== SETUP DOCUMENTATION ===
# 🎉 Setup Complete! Your Birthday Card App is Ready

## ✅ What We've Accomplished

### 1. **Database Integration**
- ✅ Mapped your existing Supabase database to Prisma
- ✅ Created complete schema with all 22 tables
- ✅ Set up proper relationships and foreign keys
- ✅ Generated TypeScript types for all models

### 2. **API Endpoints**
- ✅ Created `/api/contacts` - Full CRUD for contact management
- ✅ Created `/api/cards` - Card creation and management
- ✅ Type-safe database operations with Prisma

### 3. **User Interface**
- ✅ Updated main page with contact management
- ✅ Added contact creation form
- ✅ Integrated card creation functionality
- ✅ Real-time stats and data display

### 4. **Developer Experience**
- ✅ Full TypeScript support
- ✅ Autocomplete for all database operations
- ✅ Type-safe queries and responses
- ✅ Proper error handling

## 🚀 Next Steps to Get Started

### 1. **Get Your Database Password**
1. Go to [Supabase Dashboard](https://app.supabase.com)
2. Select project `pezchazchhnmygpdgzma`
3. Go to **Settings** → **Database**
4. Copy the **URI** connection string
5. Update your local `.env` file with the actual password

### 2. **Test the Connection**
```bash
# Generate Prisma client
npm run db:generate

# Test with Prisma Studio
npx prisma studio
```

### 3. **Run the Application**
```bash
# Start the development server
npm run dev
```

## 🎯 Features Ready to Use

### Contact Management
- ✅ Add new contacts with birthdays
- ✅ View all contacts with stats
- ✅ Email and relationship tracking
- ✅ Birthday date management

### Card Creation
- ✅ Create birthday cards for contacts
- ✅ Template-based card generation
- ✅ Status tracking (draft, sent, etc.)
- ✅ Card history per contact

### Database Integration
- ✅ Type-safe database operations
- ✅ Automatic relationship handling
- ✅ Real-time data fetching
- ✅ Error handling and validation

## 📁 Project Structure

```
src/
├── app/
│   ├── api/
│   │   ├── contacts/route.ts    # Contact CRUD operations
│   │   └── cards/route.ts       # Card management
│   ├── page.tsx                 # Main dashboard
│   └── layout.tsx               # App layout
├── components/
│   └── ui/                      # shadcn/ui components
├── lib/
│   ├── db.ts                    # Prisma database client
│   └── utils.ts                 # Utility functions
└── hooks/
    ├── use-mobile.ts            # Mobile detection
    └── use-toast.ts             # Toast notifications

prisma/
├── schema.prisma                # Database schema
└── seed.ts                     # Database seeding script

scripts/
└── supabase-setup.js            # Setup guide
```

## 🔧 Key Commands

```bash
# Database operations
npm run db:generate      # Generate Prisma client
npm run db:push          # Push schema changes
npx prisma studio       # View database GUI

# Development
npm run dev              # Start development server
npm run build            # Build for production
npm run lint             # Check code quality
```

## 🎨 What You Can Do Now

### 1. **Add Contacts**
- Fill in the contact form with names, emails, birthdays
- See contacts appear in real-time
- Track relationships and contact info

### 2. **Create Cards**
- Click "Card" button on any contact
- Automatically generates birthday cards
- Cards are saved to database with status tracking

### 3. **View Statistics**
- See total contacts, gift ideas, and cards created
- Real-time updates as you add data
- Visual dashboard with key metrics

### 4. **Extend the App**
- Add authentication with Supabase Auth
- Implement the animated card components
- Add gift recommendation features
- Create automation for birthday reminders

## 💡 Integration Examples

### Using Prisma in Components
```typescript
import { db } from '@/lib/db'

// Get user's contacts
const contacts = await db.contact.findMany({
  where: { user_id: userId },
  include: { cards: true }
})
```

### Using Supabase Auth
```typescript
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)
```

### API Routes
```typescript
// Type-safe API endpoints
export async function GET(request: NextRequest) {
  const contacts = await db.contact.findMany()
  return NextResponse.json(contacts)
}
```

## 🎉 Congratulations!

You now have a fully functional birthday card application that:

- ✅ **Uses your existing Supabase database**
- ✅ **Has type-safe database operations with Prisma**
- ✅ **Includes a working contact management system**
- ✅ **Features card creation functionality**
- ✅ **Provides excellent developer experience**

The application is ready for you to:
1. **Add your actual database password** and start using it
2. **Extend with authentication** using Supabase Auth
3. **Add the animated card components** you already built
4. **Implement gift recommendations** using your existing data
5. **Scale with confidence** using type-safe operations

You're all set to build an amazing birthday card application! 🎂✨
=== END SETUP DOCUMENTATION ===

=== SUPABASE SETUP DOCUMENTATION ===
# 🎉 Supabase + Prisma Setup Complete!

Your birthday card application is now configured to work with your existing Supabase database using Prisma as the ORM.

## ✅ What's Been Done

### 1. **Database Schema Mapped**
- Created a complete Prisma schema that matches your existing Supabase database
- All 22 tables from your database are now properly mapped
- Relationships and foreign keys are correctly defined
- Data types are properly mapped (UUID, JSONB, arrays, etc.)

### 2. **Environment Variables Set**
```bash
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=https://pezchazchhnmygpdgzma.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Database URL for Prisma
DATABASE_URL="postgresql://postgres:[YOUR-PASSWORD]@db.pezchazchhnmygpdgzma.supabase.co:5432/postgres"
```

### 3. **Prisma Client Generated**
- TypeScript types are now available for all your database tables
- Autocomplete and type safety are ready to use
- Database client is configured and ready

## 🔧 Next Steps

### Step 1: Get Your Database Password

You need to get your actual database password from Supabase:

1. Go to your [Supabase Dashboard](https://app.supabase.com)
2. Select your project `pezchazchhnmygpdgzma`
3. Go to **Settings** → **Database**
4. Find the **Connection string** section
5. Copy the **URI** connection string
6. Extract the password and replace `[YOUR-PASSWORD]` in your `.env` file

**Example Connection String:**
```
postgresql://postgres:abc123def456@db.pezchazchhnmygpdgzma.supabase.co:5432/postgres
```

### Step 2: Update Your Local Environment

Replace the placeholder in your local `.env` file:

```bash
# Before:
DATABASE_URL="postgresql://postgres:[YOUR-PASSWORD]@db.pezchazchhnmygpdgzma.supabase.co:5432/postgres"

# After:
DATABASE_URL="postgresql://postgres:your-actual-password-here@db.pezchazchhnmygpdgzma.supabase.co:5432/postgres"
```

### Step 3: Test the Connection

Run these commands to verify everything works:

```bash
# Generate Prisma client (should work without errors)
npm run db:generate

# Test database connection
npx prisma studio
```

## 🚀 How to Use Prisma with Your Existing Code

### Example: Working with Contacts

```typescript
import { db } from '@/lib/db'

// Get all contacts for a user
const contacts = await db.contact.findMany({
  where: { user_id: userId },
  include: {
    cards: true,
    gift_recommendations: true
  }
})

// Create a new contact
const newContact = await db.contact.create({
  data: {
    user_id: userId,
    first_name: "Sarah",
    last_name: "Johnson",
    email: "sarah@example.com",
    birthday_date: "03-15",
    relationship: "friend"
  }
})
```

### Example: Working with Cards

```typescript
// Create a new card
const newCard = await db.card.create({
  data: {
    user_id: userId,
    contact_id: contactId,
    title: "Happy Birthday!",
    message: "Wishing you a wonderful birthday!",
    template: "birthday-blast",
    background_style: "gradient",
    text_style: "elegant",
    status: "draft"
  }
})

// Get all cards with their contacts
const cardsWithContacts = await db.card.findMany({
  include: {
    contact: true,
    card_designs: true
  }
})
```

### Example: Using with Supabase Auth

```typescript
import { createClient } from '@supabase/supabase-js'
import { db } from '@/lib/db'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

// Get current user
const { data: { user } } = await supabase.auth.getUser()

if (user) {
  // Use Prisma to get user's data
  const contacts = await db.contact.findMany({
    where: { user_id: user.id }
  })
}
```

## 📊 Your Database Structure

Here are the main tables you'll be working with:

### Core Tables
- **`users`** - User accounts (linked to Supabase auth)
- **`profiles`** - Extended user information
- **`contacts`** - Contact management with birthdays
- **`cards`** - Birthday cards and designs
- **`gift_recommendations`** - AI-powered gift suggestions

### Supporting Tables
- **`aura_quiz_responses`** - Personality quiz results
- **`messages`** - Email/SMS delivery system
- **`purchases`** - Billing and premium features
- **`vault_assets`** - Media and image assets
- **`bg_occasions`** - Occasion templates

### Advanced Tables
- **`artwork_generations`** - AI-generated artwork
- **`trend_analyses`** - Market trend data
- **`workflow_executions`** - Automation workflows

## 🎯 Benefits of This Setup

### 1. **Type Safety**
```typescript
// Fully typed - no more string-based queries!
const contact = await db.contact.findUnique({
  where: { id: contactId }
})
```

### 2. **Autocomplete**
- All table and column names are available in your IDE
- No more typos in column names
- Relationship navigation is easy

### 3. **Complex Queries Made Simple**
```typescript
// Complex join with filtering
const results = await db.contact.findMany({
  where: {
    user_id: userId,
    birthday_date: {
      contains: "03" // March birthdays
    }
  },
  include: {
    cards: {
      where: {
        status: "sent"
      }
    },
    gift_recommendations: true
  }
})
```

### 4. **Data Validation**
- Prisma validates data before sending to database
- TypeScript types prevent runtime errors
- Automatic type generation

## 🔍 Troubleshooting

### Connection Issues
If you get connection errors:
1. Verify your database password is correct
2. Check that your IP is allowed in Supabase settings
3. Ensure your project is active

### Schema Issues
If you make changes to your database:
```bash
# Pull latest schema changes
npx prisma db pull

# Regenerate client
npx prisma generate
```

## 🎉 Ready to Code!

Your application is now ready to use Prisma with your existing Supabase database. You can:

1. **Keep using Supabase Auth** for authentication
2. **Use Prisma** for all database operations
3. **Leverage existing data** in your new features
4. **Build type-safe** database queries

The best of both worlds - Supabase's powerful services and Prisma's excellent developer experience!
=== END SUPABASE SETUP DOCUMENTATION ===

